levelz
======

.. py:module:: levelz

.. autoapi-nested-parse::

   Python bindings & API for the LevelZ File Format



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/levelz/block/index
   /autoapi/levelz/builder/index
   /autoapi/levelz/coord/index
   /autoapi/levelz/level/index
   /autoapi/levelz/parser/index


Classes
-------

.. autoapisummary::

   levelz.Scroll
   levelz.Level
   levelz.Level2D
   levelz.Level3D
   levelz.Dimension
   levelz.Coordinate
   levelz.Coordinate2D
   levelz.Coordinate3D
   levelz.Block
   levelz.LevelObject


Functions
---------

.. autoapisummary::

   levelz.parse_level
   levelz.parse_file
   levelz.parse_lines


Package Contents
----------------

.. py:class:: Scroll

   Bases: :py:obj:`enum.Enum`


   Represents the scroll direction of a 2D Level.


   .. py:attribute:: NONE
      :value: 'none'


      No Scrolling



   .. py:attribute:: HORIZONTAL_LEFT
      :value: 'horizontal-left'


      Horizontal Scrolling moving left



   .. py:attribute:: HORIZONTAL_RIGHT
      :value: 'horizontal-right'


      Horizontal Scrolling moving right



   .. py:attribute:: VERTICAL_UP
      :value: 'vertical-up'


      Vertical Scrolling moving up



   .. py:attribute:: VERTICAL_DOWN
      :value: 'vertical-down'


      Vertical Scrolling moving down



.. py:class:: Level(dimension: levelz.coord.Dimension)

   Represents a LevelZ level.


   .. py:attribute:: _dimension
      :type:  levelz.coord.Dimension


   .. py:attribute:: _blocks
      :type:  list[levelz.block.LevelObject]
      :value: []



   .. py:attribute:: _headers
      :type:  dict[str, object]


   .. py:property:: dimension
      Returns the Dimension of the Level.



   .. py:property:: blocks
      Returns an immutable copy of the blocks in the Level.



   .. py:property:: headers
      Returns an immutable copy of the headers in the Level.



.. py:class:: Level2D(headers: dict[str, object] = {}, blocks: list[levelz.block.LevelObject] = [])

   Bases: :py:obj:`Level`


   Represents a 2D Level.


   .. py:attribute:: _headers


   .. py:attribute:: _blocks


   .. py:property:: scroll
      Returns the Scroll of the Level.



   .. py:property:: spawn
      Returns the spawn point of the Level.



.. py:class:: Level3D(headers: dict[str, object] = {}, blocks: list[levelz.block.LevelObject] = [])

   Bases: :py:obj:`Level`


   Represents a 3D Level.


   .. py:attribute:: _headers


   .. py:attribute:: _blocks


   .. py:property:: spawn
      Returns the spawn point of the Level.



.. py:class:: Dimension

   Bases: :py:obj:`enum.Enum`


   Represents a Game Dimension.


   .. py:attribute:: TWO
      :value: 2


      Represents a 2D Plane.



   .. py:attribute:: THREE
      :value: 3


      Represents a 3D Space.



   .. py:property:: is2D
      Returns True if the Dimension is 2D.



   .. py:property:: is3D
      Returns True if the Dimension is 3D.



   .. py:method:: __str__()


   .. py:method:: __eq__(other)


.. py:class:: Coordinate

   Represents a Game Coordinate.


   .. py:property:: magnitude
      :abstractmethod:

      Return the magnitude of the coordinate.



   .. py:property:: dimension
      :abstractmethod:

      Return the dimension of the coordinate.



.. py:class:: Coordinate2D(x: float, y: float)

   Bases: :py:obj:`Coordinate`


   Represents a 2-Dimensional Coordinate.


   .. py:attribute:: x
      :type:  float
      :value: 0


      The x-coordinate of the 2D Coordinate.



   .. py:attribute:: y
      :type:  float
      :value: 0


      The y-coordinate of the 2D Coordinate.



   .. py:property:: magnitude
      Return the magnitude of the coordinate.



   .. py:property:: dimension
      Return the dimension of the coordinate.



   .. py:method:: __str__()


   .. py:method:: __eq__(other)


   .. py:method:: from_string(s: str)
      :staticmethod:


      Parses a string to create a 2D Coordinate.

      :param str s: The string to parse.
      :return: The 2D Coordinate.
      :rtype: Coordinate2D



.. py:class:: Coordinate3D(x: float, y: float, z: float)

   Bases: :py:obj:`Coordinate`


   Represents a 3-Dimensional Coordinate.


   .. py:attribute:: x
      :type:  float
      :value: 0


      The x-coordinate of the 3D Coordinate.



   .. py:attribute:: y
      :type:  float
      :value: 0


      The y-coordinate of the 3D Coordinate.



   .. py:attribute:: z
      :type:  float
      :value: 0


      The z-coordinate of the 3D Coordinate.



   .. py:property:: magnitude
      Return the magnitude of the coordinate.



   .. py:property:: dimension
      Return the dimension of the coordinate.



   .. py:method:: __str__()


   .. py:method:: __eq__(other)


   .. py:method:: from_string(s: str)
      :staticmethod:


      Parses a string to create a 3D Coordinate.

      :param str s: The string to parse.
      :return: The 3D Coordinate.
      :rtype: Coordiante3D



.. py:class:: Block(name: str, properties: dict[str, object] = {})

   Represents a Block in a Level.


   .. py:attribute:: _name
      :type:  str
      :value: ''



   .. py:attribute:: _properties
      :type:  dict[str, object]


   .. py:property:: name
      Returns the name of the Block.



   .. py:property:: properties
      Returns an immutable copy of the properties for the Block.



   .. py:method:: __str__()


   .. py:method:: __eq__(other)


.. py:class:: LevelObject(block: Block | str, coordinate: levelz.coord.Coordinate | list[int | float])

   Utility Object for representing a Level Block and its Coordinate.


   .. py:attribute:: _block
      :type:  Block


   .. py:attribute:: _coordinate
      :type:  levelz.coord.Coordinate


   .. py:property:: block
      Returns the Block of the LevelObject.



   .. py:property:: coordinate
      Returns the Coordinate of the LevelObject.



   .. py:method:: __str__()


   .. py:method:: __eq__(other)


.. py:function:: parse_level(level: str)

   Parses a Level from a string. Uses '\n' as the line separator.


.. py:function:: parse_file(file: str)

   Parses a Level from a file.


.. py:function:: parse_lines(level: list[str])

   Parses a Level from a list of strings.


