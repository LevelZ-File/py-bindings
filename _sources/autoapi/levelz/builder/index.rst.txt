levelz.builder
==============

.. py:module:: levelz.builder


Classes
-------

.. autoapisummary::

   levelz.builder.Level2D
   levelz.builder.Level3D
   levelz.builder.LevelObject
   levelz.builder.Block
   levelz.builder.Coordinate2D
   levelz.builder.Coordinate3D
   levelz.builder.Dimension
   levelz.builder.LevelBuilder


Module Contents
---------------

.. py:class:: Level2D(headers: dict[str, object] = {}, blocks: list[levelz.block.LevelObject] = [])

   Bases: :py:obj:`Level`


   Represents a 2D Level.


   .. py:property:: scroll
      Returns the Scroll of the Level.



   .. py:property:: spawn
      Returns the spawn point of the Level.



.. py:class:: Level3D(headers: dict[str, object] = {}, blocks: list[levelz.block.LevelObject] = [])

   Bases: :py:obj:`Level`


   Represents a 3D Level.


   .. py:property:: spawn
      Returns the spawn point of the Level.



.. py:class:: LevelObject(block: Block | str, coordinate: levelz.coord.Coordinate | list[int | float])

   Utility Object for representing a Level Block and its Coordinate.


   .. py:attribute:: _block
      :type:  Block


   .. py:attribute:: _coordinate
      :type:  levelz.coord.Coordinate


   .. py:property:: block
      Returns the Block of the LevelObject.



   .. py:property:: coordinate
      Returns the Coordinate of the LevelObject.



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __eq__(other)

      Return self==value.



.. py:class:: Block(name: str, properties: dict[str, object] = {})

   Represents a Block in a Level.


   .. py:attribute:: _name
      :type:  str
      :value: ''



   .. py:attribute:: _properties
      :type:  dict[str, object]


   .. py:property:: name
      Returns the name of the Block.



   .. py:property:: properties
      Returns an immutable copy of the properties for the Block.



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __eq__(other)

      Return self==value.



.. py:class:: Coordinate2D(x: float, y: float)

   Bases: :py:obj:`Coordinate`


   Represents a 2-Dimensional Coordinate.


   .. py:attribute:: x
      :type:  float
      :value: 0


      The x-coordinate of the 2D Coordinate.



   .. py:attribute:: y
      :type:  float
      :value: 0


      The y-coordinate of the 2D Coordinate.



   .. py:property:: magnitude
      Return the magnitude of the coordinate.



   .. py:property:: dimension
      Return the dimension of the coordinate.



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: from_string(s: str)
      :staticmethod:


      Parses a string to create a 2D Coordinate.

      :param str s: The string to parse.
      :return: The 2D Coordinate.
      :rtype: Coordinate2D



.. py:class:: Coordinate3D(x: float, y: float, z: float)

   Bases: :py:obj:`Coordinate`


   Represents a 3-Dimensional Coordinate.


   .. py:attribute:: x
      :type:  float
      :value: 0


      The x-coordinate of the 3D Coordinate.



   .. py:attribute:: y
      :type:  float
      :value: 0


      The y-coordinate of the 3D Coordinate.



   .. py:attribute:: z
      :type:  float
      :value: 0


      The z-coordinate of the 3D Coordinate.



   .. py:property:: magnitude
      Return the magnitude of the coordinate.



   .. py:property:: dimension
      Return the dimension of the coordinate.



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: from_string(s: str)
      :staticmethod:


      Parses a string to create a 3D Coordinate.

      :param str s: The string to parse.
      :return: The 3D Coordinate.
      :rtype: Coordiante3D



.. py:class:: Dimension

   Bases: :py:obj:`enum.Enum`


   Represents a Game Dimension.


   .. py:attribute:: TWO
      :value: 2


      Represents a 2D Plane.



   .. py:attribute:: THREE
      :value: 3


      Represents a 3D Space.



   .. py:property:: is2D
      Returns True if the Dimension is 2D.



   .. py:property:: is3D
      Returns True if the Dimension is 3D.



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __eq__(other)

      Return self==value.



.. py:class:: LevelBuilder(dimension: levelz.coord.Dimension)

   Represents a builder for creating LevelZ Levels.


   .. py:attribute:: _dimension
      :type:  levelz.coord.Dimension


   .. py:attribute:: _blocks
      :type:  list[levelz.block.LevelObject]
      :value: []



   .. py:attribute:: _headers
      :type:  dict[str, object]


   .. py:method:: add_block(block: levelz.block.Block | str, coordinate: levelz.coord.Coordinate2D | levelz.coord.Coordinate3D | list[int | float])

      Adds a Block to the LevelBuilder.

      :param block: The Block to add.
      :param coordinate: The Coordinate of the Block.



   .. py:method:: add_object(obj: levelz.block.LevelObject)

      Adds a LevelObject to the LevelBuilder.

      :param LevelObject obj: The LevelObject to add.



   .. py:method:: add_header(key: str, value: object)

      Adds a header to the LevelBuilder.

      :param str key: The key of the header.
      :param object value: The value of the header.



   .. py:method:: build()

      Builds the Level from the LevelBuilder.



   .. py:property:: dimension
      Returns the Dimension of the LevelBuilder.



   .. py:property:: blocks
      Returns an immutable copy of the blocks in the LevelBuilder.



   .. py:property:: headers
      Returns an immutable copy of the headers in the LevelBuilder.



   .. py:method:: create_2d()
      :staticmethod:


      Creates a 2D LevelBuilder.



   .. py:method:: create_3d()
      :staticmethod:


      Creates a 3D LevelBuilder.



